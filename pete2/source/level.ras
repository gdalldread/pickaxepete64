var  
	// game progression parameters
	level_num_ladders : byte = 5;
	boulder_x_speed : byte = 7;

	wait_key_ttl : byte = 255;
	flash_key_ttl : byte = 80;
	wait_pick_ttl : byte = 255;
	flash_pick_ttl : byte = 80;
	hold_pick_ttl : byte = 255;
	holdflash_pick_ttl : byte = 80;
	start_pick_threshold : byte = 150; // greater than
	start_key_threshold : byte = 64; // less than
	boulder_release_frequency  : byte = 1;

	// game progression sequences
	// first value defines the level increment between each value
	// second value defines how many in the sequence
	level_num_ladders_seq : array[] of byte = (2, 5, 5, 4, 3, 2, 1);
	boulder_x_speed_seq : array[] of byte = (20, 2, 6, 7);
	item_wait_ttl_seq : array[] of byte = (3, 4, 255, 200, 150, 100);
	start_pick_threshold_seq : array[] of byte = (5, 5, 150, 180, 200, 220, 254);
	start_key_threshold_seq : array[] of byte = (5, 5, 64, 40, 32, 16, 5);
	boulder_release_frequency_seq : array[] of byte = (10, 3, 1, 5, 10);

	///////////////////////////////////////////

	new_level_required : byte;
	screencolor : pointer;


	level_lines_lookup : array[25] of byte;
	level_holes_lookup : array[25] of byte;
	has_ladder_lookup : array[25] of byte;
	
	// Monsterbtw: since the difference between hybrid/ multicolor/hires doesn't seem to be that big in terms of code, perhaps we should instead have a drop down list that lets you select multicolor type : record	
	level_line_type = record
		y : byte;
		numHoles : byte;
		hole1 : byte; // x location
		hole2 : byte;
		hole3 : byte;
	end;

	// Number of walkers
	const num_lines : byte = 7;
	// Monster array allocation will fail if it is an array. 
	level_lines : array[num_lines] of level_line_type;
	level_colour : byte = red;
	pete_lives : byte = 3;
	max_pete_lives : byte = 3;
	game_over : byte = 0;

	// create two BCD numbers in memory, least significant byte first
	game_score: array[] of byte = ($00, $00, $00, $00, $00);
	hi_score: array[] of byte = ($00, $00, $00, $00, $00);
	score_level : byte = 1;

	//scoreAddTest: array[] of byte = ($25, $00, $00, $00, $00);
	scoreAddBoulderHit: array[] of byte = ($10, $00, $00, $00, $00);
	scoreAddBoulderJump: array[] of byte = ($5, $00, $00, $00, $00);
	scoreAddGetPick: array[] of byte = ($25, $00, $00, $00, $00);
	scoreAddGetKey: array[] of byte = ($25, $00, $00, $00, $00);
	scoreAddNewLevel: array[] of byte = ($50, $00, $00, $00, $00);


function GetLevelParameter(sequence : pointer) : byte;
var
	param_index : byte = 0;
begin

	param_index := (score_level - 1) / sequence[0];
	if (param_index > sequence[1]) then param_index := sequence[1] - 1;
	GetLevelParameter := sequence[param_index + 2];
end;

procedure SetLevelGameParameters();
var 
begin
	level_num_ladders := GetLevelParameter(#level_num_ladders_seq);
	boulder_x_speed := GetLevelParameter(#boulder_x_speed_seq);

	wait_key_ttl := GetLevelParameter(#item_wait_ttl_seq);
	wait_pick_ttl := GetLevelParameter(#item_wait_ttl_seq);
	hold_pick_ttl := GetLevelParameter(#item_wait_ttl_seq);

	start_pick_threshold := GetLevelParameter(#start_pick_threshold_seq); // greater than
	start_key_threshold := GetLevelParameter(#start_key_threshold_seq); // less than
	boulder_release_frequency := GetLevelParameter(#boulder_release_frequency_seq);
end;

procedure CreateLevel();
var
	current_y : byte;
	cl_index : byte;
	hole_ok : byte;
begin
	new_level_required := 0;
	SetLevelGameParameters();

	for cl_index := 0 to 25 do
	begin
		// this tells us if a screen line has an actual level line
		level_lines_lookup[cl_index] := 0;
		
		// this tells us where the hole is for this line - most will be 0
		level_holes_lookup[cl_index] := 0;

		// does this screen line have a ladder already
		has_ladder_lookup[cl_index] := 0;
	end;

	// 7 lines
	current_y := 3;
	for cl_index := 0 to num_lines do	
	begin		
		// now we know the y coord of this actual level line
		level_lines[cl_index].y := current_y;
		
		// create a lookup table of which screen lines have a level line
		level_lines_lookup[current_y] := 1;
		
		// randomly assign holes
		level_lines[cl_index].numHoles := 1;
		//rand(1,35,level_holes_lookup[current_y]);
		level_holes_lookup[current_y] := mod(random(), 35) + 1;		

		// make sure the hole doesn't correspond with a portal
		if ((cl_index = 0) or (cl_index = 3)) then
		begin 
			hole_ok := 0;
			while hole_ok = 0 do
			begin
				//rand(1,35,level_holes_lookup[current_y]);
				level_holes_lookup[current_y] := mod(random(), 35) + 1;		
				if ((level_holes_lookup[current_y] < 15) or (level_holes_lookup[current_y] > 19)) then hole_ok := 1;
			end;
		end;
	
		// don't put a hole on the bottom level line
		if (cl_index = num_lines - 1) then level_holes_lookup[current_y] := 0;
		
		current_y := current_y + 3;
	end;
end;

procedure ResetPeteLives();
begin
	pete_lives := max_pete_lives;
end;

procedure DrawLives();
var
	dliv_index : byte;
	dliv_char : byte;
begin

	screenmemory := #screen_char_loc3;// + $4000;		
	screencolor := #screen_col_loc;

	screenmemory := screenmemory + (23*40) + 34;
	screencolor := screencolor + (23*40) + 34;

	for dliv_index := 0 to max_pete_lives do
	begin
		
		dliv_char := 28;

		if (dliv_index >= pete_lives) then dliv_char := 80;


		screenmemory[0] := dliv_char;					
	/*	screenmemory[1] := 26+1;
		screenmemory[40] := 26+40;				
		screenmemory[41] := 26+41;				*/

		screencolor[0] := yellow;
/*		screencolor[1] := yellow + 8;
		screencolor[40] := yellow + 8;
		screencolor[41] := yellow + 8;*/

		inc(screenmemory);
		inc(screencolor);

	end;

end;

procedure DrawScore();
var
	dscr_index : byte;
	dscr_char : byte;
begin

	screenmemory := #screen_char_loc3;// + $4000;		
	screencolor := #screen_col_loc;

	screenmemory := screenmemory + (23*40) + 1;
	screencolor := screencolor + (23*40) + 1;

	for dscr_index := 0 to 30 do
	begin
		
		//dscr_char := 48 + dscr_index;



		//screenmemory[0] := dscr_char;					
	/*	screenmemory[1] := 26+1;
		screenmemory[40] := 26+40;				
		screenmemory[41] := 26+41;				*/

		screencolor[0] := green;
/*		screencolor[1] := yellow + 8;
		screencolor[40] := yellow + 8;
		screencolor[41] := yellow + 8;*/

		//inc(screenmemory);
		inc(screencolor);

	end;
	
	moveto(1,23,hi(screen_char_loc3));
	BcdPrint(#game_score, 4 );

	screenmemory := #screen_char_loc3;// + $4000;		
	screencolor := #screen_col_loc;

	// LVL
	screenmemory := screenmemory + (23*40) + 11;
	screencolor := screencolor + (23*40) + 11;

	screenmemory[0] := 89;					
	screencolor[0] := yellow;

	screenmemory := screenmemory + 6;
	screencolor := screencolor + 6;

	// HI
	screenmemory[0] := 88;					
	screencolor[0] := yellow;


	moveto(12,23,hi(screen_char_loc3));
	printdecimal(score_level, 1);

	moveto(18,23,hi(screen_char_loc3));
	BcdPrint(#hi_score, 4 );
end;

procedure SetHighScore();
var
	hs_idx : byte;
begin
	for hs_idx := 0 to 5 do
	begin
		hi_score[hs_idx] := game_score[hs_idx];
	end;
end;

procedure ZeroScore();
var
	zs_idx : byte;
begin
	for zs_idx := 0 to 5 do
	begin
		game_score[zs_idx] := 0;
	end;
	
	score_level := 1;
end;


procedure DrawLevel();
var 
dl_x, dl_y : byte;
dl_char : byte;
is_a_line : byte;
begin
	screenmemory := #screen_char_loc3;// + $4000;		
	screencolor := #screen_col_loc;

	for dl_y := 0 to 25 do
	begin
	
		for dl_x := 0 to 40 do
		begin
			dl_char := 0;
		
			if (dl_y = 0) then dl_char := 17;
			if (dl_y = 24) then dl_char := 18;

			// are we a left edge
			if (dl_x = 0) then
			begin
				dl_char := 15;
				// are we a line
				if (level_lines_lookup[dl_y] = 1) then dl_char := 12;
			end;
			// are we a right edge
			if (dl_x = 39) then
			begin
				dl_char := 16;
				// are we a line
				if (level_lines_lookup[dl_y] = 1) then dl_char := 13;
			end;

			// are we a line?
			if ((dl_char = 0) and (level_lines_lookup[dl_y] = 1)) then 
			begin 
				dl_char := 14;
				if ( level_holes_lookup[dl_y] > 0 ) then
				begin
					if ((dl_x >= level_holes_lookup[dl_y]) and (dl_x < level_holes_lookup[dl_y] + 4)) then dl_char := 0;
				end;
				// are we a hole?
			end;

			// are we a corner? TL8, TR9, BL10, BR11
			if ((dl_x = 0) and (dl_y = 0)) then dl_char := 8;
			if ((dl_x = 39) and (dl_y = 0)) then dl_char := 9;
			if ((dl_x = 0) and (dl_y = 24)) then dl_char := 10;
			if ((dl_x = 39) and (dl_y = 24)) then dl_char := 11;


			if (dl_char <> 0) then 
			begin
				screenmemory[0] := dl_char;
				screencolor[0] := blue + 8;
			end;
			inc(screenmemory);
			inc(screencolor);
		end;
	end;
	
	DrawLives();
	DrawScore();
end;


procedure DrawBetweenLevelScreen();
var 
dbl_x, dbl_y : byte;
dbl_char : byte;
begin
	screenmemory := #screen_char_loc3;// + $4000;		
	screencolor := #screen_col_loc;

	//level_colour := blue;

	for dbl_y := 0 to 25 do
	begin
	
		for dbl_x := 0 to 10 do
		begin
			screenmemory[0] := 25;
			screencolor[0] := level_colour + 8;
			inc(screenmemory);
			inc(screencolor);
		end;
		for dbl_x := 10 to 18 do
		begin
			screenmemory[0] := 24;
			screencolor[0] := level_colour + 8;
			inc(screenmemory);
			inc(screencolor);
		end;
		for dbl_x := 18 to 22 do
		begin
			screenmemory[0] := 23;
			screencolor[0] := level_colour + 8;
			inc(screenmemory);
			inc(screencolor);
		end;
		for dbl_x := 22 to 30 do
		begin
			screenmemory[0] := 24;
			screencolor[0] := level_colour + 8;
			inc(screenmemory);
			inc(screencolor);
		end;
		for dbl_x := 30 to 40 do
		begin
			screenmemory[0] := 25;
			screencolor[0] := level_colour + 8;
			inc(screenmemory);
			inc(screencolor);
		end;
		
	end;
end;

